/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {TreeNode}
 */
var lowestCommonAncestor = function(root, p, q) {
    // Base case: if the root is null, or if the root is either p or q, return root
    if (root === null || root === p || root === q) {
        return root;
    }

    // Recursively search for LCA in the left subtree
    let left = lowestCommonAncestor(root.left, p, q);

    // Recursively search for LCA in the right subtree
    let right = lowestCommonAncestor(root.right, p, q);

    // If both left and right are not null, root is the LCA
    if (left !== null && right !== null) {
        return root;
    }

    // Otherwise, return the non-null value (either left or right)
    return left !== null ? left : right;
};
